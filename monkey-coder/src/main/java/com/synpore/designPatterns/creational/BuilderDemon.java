package com.synpore.designPatterns.creational;

import java.beans.ConstructorProperties;

/**
 * Allows you to create different flavors of an object while avoiding constructor pollution. Useful when there
 * could be several flavors of an object. Or when there are a lot of steps involved in creation of an object.
 */
public class BuilderDemon {


    public static void main(String[] args) {
        // use case,this class is generated by lombok use @Builder annotation
        OpenAppDTO openAppDTO=OpenAppDTO.builder().idfa("1duyjejh12").ipv4("192.168.0.1").type(5).build();
    }
}


 class OpenAppDTO {
    private String pid;
    private Integer type;
    private String idfa;
    private String ipv4;
    private String userAgent;

    public static OpenAppDTO.OpenAppDTOBuilder builder() {
        return new OpenAppDTO.OpenAppDTOBuilder();
    }

    public String getPid() {
        return this.pid;
    }

    public Integer getType() {
        return this.type;
    }

    public String getIdfa() {
        return this.idfa;
    }

    public String getIpv4() {
        return this.ipv4;
    }

    public String getUserAgent() {
        return this.userAgent;
    }

    public void setPid(String pid) {
        this.pid = pid;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public void setIdfa(String idfa) {
        this.idfa = idfa;
    }

    public void setIpv4(String ipv4) {
        this.ipv4 = ipv4;
    }

    public void setUserAgent(String userAgent) {
        this.userAgent = userAgent;
    }

    protected boolean canEqual(Object other) {
        return other instanceof OpenAppDTO;
    }


    public String toString() {
        return "OpenAppDTO(pid=" + this.getPid() + ", type=" + this.getType() + ", idfa=" + this.getIdfa() + ", ipv4=" + this.getIpv4() + ", userAgent=" + this.getUserAgent() + ")";
    }

    @ConstructorProperties({"pid", "type", "idfa", "ipv4", "userAgent"})
    public OpenAppDTO(String pid, Integer type, String idfa, String ipv4, String userAgent) {
        this.pid = pid;
        this.type = type;
        this.idfa = idfa;
        this.ipv4 = ipv4;
        this.userAgent = userAgent;
    }

    public OpenAppDTO() {
    }

     static class OpenAppDTOBuilder {
        private String pid;
        private Integer type;
        private String idfa;
        private String ipv4;
        private String userAgent;

        OpenAppDTOBuilder() {
        }

        public OpenAppDTO.OpenAppDTOBuilder pid(String pid) {
            this.pid = pid;
            return this;
        }

        public OpenAppDTO.OpenAppDTOBuilder type(Integer type) {
            this.type = type;
            return this;
        }

        public OpenAppDTO.OpenAppDTOBuilder idfa(String idfa) {
            this.idfa = idfa;
            return this;
        }

        public OpenAppDTO.OpenAppDTOBuilder ipv4(String ipv4) {
            this.ipv4 = ipv4;
            return this;
        }

        public OpenAppDTO.OpenAppDTOBuilder userAgent(String userAgent) {
            this.userAgent = userAgent;
            return this;
        }

        public OpenAppDTO build() {
            return new OpenAppDTO(this.pid, this.type, this.idfa, this.ipv4, this.userAgent);
        }

        public String toString() {
            return "OpenAppDTO.OpenAppDTOBuilder(pid=" + this.pid + ", type=" + this.type + ", idfa=" + this.idfa + ", ipv4=" + this.ipv4 + ", userAgent=" + this.userAgent + ")";
        }
    }
}


